// BlueprintGeneratedClass UniversalFunctions.UniversalFunctions_C
// Size: 0x28 (Inherited: 0x28)
struct UUniversalFunctions_C : UBlueprintFunctionLibrary {

	void GetBlueFireLanguage(UObject* __WorldContext, int32_t Index, FString Language);
	void SetDefaultInputOkAndBack(UBlueFire_Game_Instance_C* BlueFireGameInstance, UObject* __WorldContext);
	void GetAllStreamingLevels(UObject* __WorldContext, TArray<FName> All Streaming Levels);
	void GetAreaFromChunk(enum class StreamingChunks Chunk, UObject* __WorldContext, FString Area);
	void GetChunkFromCheckpoint(enum class CheckPoints CheckPoint, UObject* __WorldContext, enum class StreamingChunks Chunk);
	void GetLevelsToLoadFromChunk(enum class StreamingChunks Chunk, UObject* __WorldContext, TArray<FName> All Levels);
	void GetVisibleAreasFromCheckpoint(enum class CheckPoints CheckPoint, UObject* __WorldContext, TArray<FName> Visible Areas);
	void GetChunkName(enum class StreamingChunks Area, UObject* __WorldContext, FText Name);
	void DeleteIDToCheckState(FString ID, bool HiddenSave, UObject* __WorldContext);
	void DisableLockHint(bool Disable, UObject* __WorldContext);
	void GetEmote(enum class E_Emotes NewEmote, UObject* __WorldContext);
	void IncreaseFireEssence(int32_t Amount, UObject* __WorldContext);
	void QuestStatus(enum class QuestStatusType Quest Operation, enum class Quests Prev Quest, enum class Quests New Quest, bool Silent, UObject* __WorldContext);
	void GetStatUpgradeClass(UObject* __WorldContext, FPlayerStatsSimple Movement, FPlayerStatsSimple Attack, FPlayerStatsSimple Defense);
	void GetAreaName(enum class Areas Area, UObject* __WorldContext, FText Name);
	void NextLevel(UObject* __WorldContext);
	void AddLifeSlot(bool Animate, UObject* __WorldContext);
	void SetItem(enum class Items Item, int32_t Amount, bool KeyItem, bool IgnoreSpecialPopUp, UObject* __WorldContext, bool Success, bool SpecialPopUp);
	void GetCheckPointText(enum class CheckPoints CheckPoint, UObject* __WorldContext, FText Text);
	void GetAchievement(enum class Achievements Achievement, UObject* __WorldContext);
	void GetSpiritSlot(int32_t Amount, UObject* __WorldContext);
	void GetAsset(enum class InventoryItemType Type, enum class Weapons Weapon, enum class Tunics Tunic, enum class Spirits Amulet, UObject* __WorldContext);
	void HasCurrency(int32_t CurrencyValue, bool ReduceIfTrue, bool SoundIfTrue, UObject* __WorldContext, bool TRUE);
	void GetUIPlatform(enum class PlatformInput Action-OLDInput, UBlueFire_Game_Instance_C* BlueFireGameInstance, UObject* __WorldContext, UMaterialInstance* UIMaterial, bool NonSquareSize, FVector2D Size);
	void HasGodStone(int32_t Amount, UObject* __WorldContext, bool TRUE);
	void GlobalForceFeedback(enum class ForceFeedbackTypes Start, UForceFeedbackEffect* ForceFeedbackEffect, UObject* __WorldContext);
	void GlobalEffectCamAttack(UObject* __WorldContext);
	void CromaHit(UObject* __WorldContext);
	void SaveGame(bool HiddenSave, UObject* __WorldContext);
	void ChangePCGamePad(UObject* __WorldContext);
	void RemoveAbilityRecord(enum class Abilities Ability, UObject* __WorldContext);
	void HasAbility(enum class Abilities Ability, UObject* __WorldContext, bool Yes);
	void HasItem(enum class Items Item, int32_t Amount, bool KeyItem, UObject* __WorldContext, bool Success, int32_t ItemAmount);
	void PlayerDistance(AActor* Actor, float Less Than Distance, UObject* __WorldContext, bool TRUE);
	void FreezeEnemies(bool Freeze, bool AlsoFreezeOrUnfreezePlayer, bool OnlyFreezeOrUnfreezePlayer, UObject* __WorldContext);
	void NoInventorySpaceHUD(UObject* __WorldContext);
	void DisplayHUDLoot(enum class Items Item, int32_t Amount, UObject* __WorldContext);
	void ToLower(FText Text, UObject* __WorldContext, FText Out);
	void CheckIfActionOK(AActor* SelfRef, UObject* __WorldContext, bool Success);
	void AddRemoveAction(AActor* SelfRef, bool Remove, UObject* __WorldContext, bool Success);
	void SetActionCharacter(AActor* SelfRef, bool Remove, UObject* __WorldContext, bool Success);
	void GetGodStone(FString Name, FGodStone_Structure GodStoneInfo, UObject* __WorldContext);
	void GetCurrency(int32_t CurrencyValue, bool Sound, bool DoubleSpiritAffected, bool ShowInHUD, UObject* __WorldContext, bool Success);
	void PlayerHitLaunch(FVector HitOrigin, float Multiplier XY, float Multiplier Z, UObject* __WorldContext);
	void GetNewAbilityRecord(enum class Abilities Ability, UObject* __WorldContext);
	void GetItemHUD(enum class Items Item, int32_t Amount, bool KeyItem, bool HasPickup, enum class InventoryItemType Type, enum class Tunics Tunic, enum class Weapons Weapon, enum class Spirits Amulet, enum class E_Emotes Emote, UObject* __WorldContext, UNewItem_C* NewItemHud);
	void UseItem(enum class Items Item, int32_t Amount, bool KeyItem, UObject* __WorldContext, bool Success, int32_t CurrentAmount);
	void GetItem(enum class Items Item, int32_t Amount, bool KeyItem, bool IgnoreSpecialPopUp, bool IgnoreAnimation, bool ConsumeOldItem, UObject* __WorldContext, bool Success, bool SpecialPopUp);
	void AddGamePercent(float Percent, UObject* __WorldContext);
	void AddToResetDestroy(AActor* Actor, UObject* __WorldContext);
	void CheckStateLoadMenu(FString ID, UBlueFireSaveGame_C* SaveObject, UObject* __WorldContext, bool Used);
	void Save(bool HiddenSave, AGlobal_Controller_C* Global Controller, bool Show HUD, UObject* __WorldContext);
	void WriteIDToCheckState(FString ID, bool HiddenSave, UBlueFire_Game_Instance_C* Game Instance, AGlobal_Controller_C* Global Controller, bool Show HUD, UObject* __WorldContext);
	void CheckState(FString ID, UObject* __WorldContext, FString Same ID, bool Used);
	void UseSouls(int32_t Currency, UObject* __WorldContext, bool Has);
	void GetSouls(int32_t Currency, UObject* __WorldContext);
	void ChangeFogColor(bool Revert, FLinearColor NewColor, float PlayRate, UObject* __WorldContext);
	void FreezePlayer(bool Unfreeze, UObject* __WorldContext);
	void Cutscene(bool Enter, FVector PointA, FVector PointB, bool RotatePlayer, AActor* Cam, enum class EViewTargetBlendFunction BlendFunc, float BlendTime, bool ShowHUD, bool StopEnemies, UObject* __WorldContext, float OutputPin);
	void Rotation 180 To 360(float Yaw Input, UObject* __WorldContext, float 0 - 360);
};

